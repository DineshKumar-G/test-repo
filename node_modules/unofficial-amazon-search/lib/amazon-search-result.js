"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @class AmazonSearchResult
 * @description An object containing common properties that can be scraped from different Amazon search result
 * formats.
 * @public
 * @property {string} title - Name of product
 * @property {string} productUrl - URL for product details page
 * @property {string} imageUrl - lead product image that shows in search results
 * @property {Array.<Rating>} rating - Score out of a total value
 * @property {Array.<Price>} prices - Search often lists multiple prices for versions of an item. This is a set of all
 * found prices, some of which have labels attached (for example, if you search a DVD barcode number, there are multiple
 * prices, for DVD, Blu-ray and 4K, and each has a label like "4K"). Price label is null if cannot find it on page
 * @property {boolean} sponsored - whether result is an ad
 */
var AmazonSearchResult = /** @class */ (function () {
    function AmazonSearchResult(block) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.rating = { score: null, outOf: null };
        this.prices = [];
        this.sponsored = false;
        this.title = (_c = (_b = (_a = block.querySelector('h2')) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim()) !== null && _c !== void 0 ? _c : '';
        this.imageUrl = (_e = (_d = block.querySelector('a img')) === null || _d === void 0 ? void 0 : _d.getAttribute('src')) !== null && _e !== void 0 ? _e : '';
        this.productUrl = (_g = (_f = block.querySelector('a')) === null || _f === void 0 ? void 0 : _f.getAttribute('href')) !== null && _g !== void 0 ? _g : '';
        this.rating = AmazonSearchResult.extractRating(block);
        this.prices = AmazonSearchResult.extractPrices(block);
        this.sponsored = AmazonSearchResult.extractIsSponsored(block);
    }
    AmazonSearchResult.extractIsSponsored = function (block) {
        var _a, _b, _c, _d;
        var sponsorBlock = block.querySelector('.s-sponsored-label-info-icon');
        if (!sponsorBlock) {
            return false;
        }
        else {
            return (_d = (_c = (_b = (_a = sponsorBlock.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.textContent) === null || _c === void 0 ? void 0 : _c.toLowerCase().includes('sponsored')) !== null && _d !== void 0 ? _d : false;
        }
    };
    // not all prices have corresponding subheads
    AmazonSearchResult.extractPrices = function (block) {
        var subheads = Array.from(block.querySelectorAll('a.a-text-bold.a-link-normal'));
        var priceStrings = Array.from(block.querySelectorAll('.a-price-whole')).map(function (elem) { var _a, _b, _c; return (_c = (_b = (_a = elem.parentElement) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.trim()) !== null && _c !== void 0 ? _c : ''; });
        return priceStrings.reduce(function (prices, priceString, i) {
            var _a, _b;
            var subhead;
            if (i < subheads.length) {
                subhead = subheads[i];
            }
            var key = (_b = (_a = subhead === null || subhead === void 0 ? void 0 : subhead.textContent) === null || _a === void 0 ? void 0 : _a.trim()) !== null && _b !== void 0 ? _b : '';
            if (priceString) {
                prices.push({
                    price: parseFloat(priceString.replace(/[^\d.]/g, '')),
                    label: key ? key : null
                });
            }
            return prices;
        }, []);
    };
    AmazonSearchResult.extractRating = function (block) {
        var _a, _b, _c, _d;
        var numbers = (_d = (_c = (_b = (_a = block.querySelector('i.a-icon-star-small')) === null || _a === void 0 ? void 0 : _a.textContent) === null || _b === void 0 ? void 0 : _b.match(/\d(\.\d)?/g)) === null || _c === void 0 ? void 0 : _c.map(function (match) { return parseFloat(match); })) !== null && _d !== void 0 ? _d : [-1, -1];
        switch (numbers.length) {
            case 0:
                return { score: -1, outOf: -1 };
            case 1:
                return { score: numbers[0], outOf: -1 };
            default:
                return { score: numbers[0], outOf: numbers[1] };
        }
    };
    Object.defineProperty(AmazonSearchResult.prototype, "fullProductUrl", {
        get: function () {
            return AmazonSearchResult.domain + this.productUrl;
        },
        set: function (productUrl) {
            if (!productUrl.startsWith(AmazonSearchResult.domain)) {
                throw new Error("Values assigned to fullProductUrl must start with " + AmazonSearchResult.domain + ", assign domainless paths to productUrl");
            }
            this.productUrl = productUrl.substring(AmazonSearchResult.domain.length);
        },
        enumerable: false,
        configurable: true
    });
    AmazonSearchResult.domain = 'https://www.amazon.com';
    return AmazonSearchResult;
}());
exports.default = AmazonSearchResult;
//# sourceMappingURL=amazon-search-result.js.map