"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
var browser_or_node_1 = require("browser-or-node");
var jsdom_1 = require("jsdom");
var amazon_search_result_1 = __importDefault(require("./amazon-search-result"));
var dom_parser_1 = __importDefault(require("./dom-parser"));
/**
 * Polyfills SharedArrayBuffer, which is disabled in Firefox (off by default), IE, Opera, Safari, and a whole host of
 * other browsers because of Spectre vulnerability exploits.
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer
 */
if (browser_or_node_1.isBrowser) {
    var sab = function () { };
    sab.prototype.byteLength = {};
    sab.prototype.byteLength.get = function () {
        throw new Error('Browser does not support SharedArrayBuffer');
    };
    window.SharedArrayBuffer = sab;
}
/**
 * @name extractResults
 * @description Converts raw HTML to AmazonSearchResult instances for easier parsing
 * @param {ParentNode} elem - Node element containing search results, whether real DOM or JSDOM
 * @returns {Array.<AmazonSearchResult>}
 */
function extractResults(elem) {
    var resultNodeList = elem.querySelectorAll('div[data-component-type="s-search-result"]');
    var searchResultBlocks = Array.from(resultNodeList);
    return searchResultBlocks.map(function (searchResultBlock) {
        return new amazon_search_result_1.default(searchResultBlock);
    });
}
function queryToRequest(query, page) {
    var queryParams = [
        "k=" + encodeURIComponent(query),
        page ? "ref=sr_pg_" + page : 'nb_sb_noss',
    ];
    if (page && page > 1)
        queryParams.push("page=" + page);
    return "https://www.amazon.com/s?" + queryParams.join('&');
}
function queryToProxiedRequest(query, page) {
    var url = queryToRequest(query, page);
    return 'http://api.allorigins.win/get?url=' + encodeURIComponent(url);
}
function hasNextPage(elem, currentPage) {
    var nextPage = (currentPage !== null && currentPage !== void 0 ? currentPage : 1) + 1;
    var nextLink = elem.querySelector("a[href*=\"page=" + nextPage + "\"]");
    return Boolean(nextLink);
}
/**
 * @name searchAmazon
 * @description Scrapes the first page of Amazon search results
 * @public
 * @param {string} query - What you'd type in to the Amazon search bar
 * @param {boolean=} includeSponsoredResults - Filters sponsored results by default
 * @returns {Promise<Array.<AmazonSearchResult>>}
 */
function searchAmazon(query, config) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var currentPage, searchData, documentNode, resp, body, pageHtml, resp, pageHtml, virtualDOM;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    currentPage = (_a = config === null || config === void 0 ? void 0 : config.page) !== null && _a !== void 0 ? _a : 1;
                    searchData = {
                        searchResults: [],
                        pageNumber: currentPage,
                        getNextPage: undefined
                    };
                    if (!browser_or_node_1.isBrowser) return [3 /*break*/, 3];
                    return [4 /*yield*/, isomorphic_fetch_1.default(queryToProxiedRequest(query, config === null || config === void 0 ? void 0 : config.page))];
                case 1:
                    resp = _b.sent();
                    return [4 /*yield*/, resp.json()];
                case 2:
                    body = _b.sent();
                    pageHtml = body.contents;
                    documentNode = dom_parser_1.default(pageHtml);
                    return [3 /*break*/, 6];
                case 3: return [4 /*yield*/, isomorphic_fetch_1.default(queryToRequest(query, config === null || config === void 0 ? void 0 : config.page))];
                case 4:
                    resp = _b.sent();
                    return [4 /*yield*/, resp.text()];
                case 5:
                    pageHtml = _b.sent();
                    virtualDOM = new jsdom_1.JSDOM(pageHtml);
                    documentNode = virtualDOM.window.document;
                    _b.label = 6;
                case 6:
                    searchData.searchResults = extractResults(documentNode);
                    if (hasNextPage(documentNode, config === null || config === void 0 ? void 0 : config.page)) {
                        searchData.getNextPage = function () { return searchAmazon(query, config); };
                    }
                    if (!(config === null || config === void 0 ? void 0 : config.includeSponsoredResults)) {
                        searchData.searchResults = searchData.searchResults.filter(function (result) { return !result.sponsored; });
                    }
                    return [2 /*return*/, searchData];
            }
        });
    });
}
exports.default = searchAmazon;
//# sourceMappingURL=search.js.map